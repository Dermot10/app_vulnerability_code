"""This module provides the GruyereExploitationCLI."""
"""User Input commands, Option providing acceptable paramaters """


from playwright.sync_api import sync_playwright
from web_exploits import ExploitBrowser
import typer
import time
import os
cli = typer.Typer()
exploit_browser = ExploitBrowser()


@cli.command()
def exploit_dom_xss(url: str, payload: str = typer.Argument(..., help="Javascript or HTML to to inject into DOM")):
    """Cli command to exploit DOM with XSS attack"""
    exploit_browser.dom_xss_attack(url, payload)
    time.sleep(30)


@cli.command()
def exploit_reflected_xss(url: str):
    """Cli command to exploit url with reflected XSS attack"""
    exploit_browser.reflected_xss_attack(url)
    time.sleep(30)


@cli.command()
def exploit_gruyere_server(url: str, new_secret_destination: str = typer.Argument(..., help="Create file name and existing location to write data to")):
    """
    Cli command to exploit the Gruyere server to read the secret.txt file. Using path traversal
    """
    exploit_browser.steal_file_data(url, new_secret_destination)
    time.sleep(10)


@cli.command()
def exploit_path_traversal(url: str, filename: str = typer.Argument(..., help="Path and file you want to inject into url")):
    """
    Cli command to exploit the url with path traveral to upload a file to the Gruyere server"""
    exploit_browser.exploit_file_upload_path_traversal(url, filename)
    time.sleep(20)


@cli.command()
def exploit_cookies_elevate_privileges(url: str):
    """
    Cli command to exploit cookies and elevate user privileges to admin privliges"""
    exploit_browser.cookies_elevate_privileges(url)
    time.sleep(30)


@cli.command()
def remote_login(url: str, username: str = typer.Argument(..., help="username"), password: str = typer.Argument(..., help="password")):
    """
    Cli command to remotely login, allows for further testing"""
    exploit_browser.commandline_login_credentials(url, username, password)
    time.sleep(20)


@cli.command()
def check_cookies(url: str = typer.Argument(..., help="User must be logged in to access cookies")):
    """Retrieve the cookies from the webpage. Cookies are granted and never revoked. Used to bypass authentication"""
    exploit_browser.check_cookies(url)
    time.sleep(20)


@cli.command()
def exploit_upload(url: str, file: str):
    """Uploads file which has html to the webpage"""
    pass
